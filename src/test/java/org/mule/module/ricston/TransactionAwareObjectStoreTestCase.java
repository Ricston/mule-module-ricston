/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.module.ricston;

import org.junit.Ignore;
import org.junit.Test;
import org.mule.DefaultMuleMessage;
import org.mule.api.MuleEventContext;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.api.transaction.Transaction;
import org.mule.tck.functional.EventCallback;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.transaction.TransactionCoordination;
import org.mule.transport.NullPayload;

import javax.transaction.xa.XAException;
import javax.transaction.xa.XAResource;
import javax.transaction.xa.Xid;

import static org.junit.Assert.*;

public class TransactionAwareObjectStoreTestCase extends FunctionalTestCase {

    private MuleClient client;
    private DefaultMuleMessage messageFoo;
    private DefaultMuleMessage messageFooDuplicate;
    private DefaultMuleMessage messageBar;

    protected String getConfigResources() {
        return "transaction-aware-object-store-config.xml";
    }

    @Override
    public void doSetUp() throws Exception {
        MuleContextHandler.setMuleContext(muleContext);
        client = muleContext.getClient();
        messageFoo = new DefaultMuleMessage("some data", muleContext);
        messageFooDuplicate = messageFoo;
        messageBar = new DefaultMuleMessage("some data", muleContext);

        super.doSetUp();
    }

    @Test
    public void testAbort() throws Exception {
        DefaultMuleMessage message = new DefaultMuleMessage("some data", muleContext);

        getFunctionalTestComponent("main").setEventCallback(new EventCallback() {
            @Override
            public void eventReceived(MuleEventContext context, Object component) throws Exception {
                throw new RuntimeException();

            }
        });

        assertNull(sendMessage("vm://in", "vm://out", messageFoo));

        getFunctionalTestComponent("main").setEventCallback(null);

        MuleMessage result = sendMessage("vm://in", "vm://out", messageFooDuplicate);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);
        assertEquals("some data Received", result.getPayloadAsString());
    }

    @Test
    public void testCommit() throws Exception {
        MuleMessage result = sendMessage("vm://in", "vm://out", messageFoo);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);
        assertEquals("some data Received", result.getPayloadAsString());

        MuleMessage secondResult = sendMessage("vm://in", "vm://out", messageBar);
        assertNotNull(secondResult);
        assertNull(secondResult.getExceptionPayload());
        assertFalse(secondResult.getPayload() instanceof NullPayload);
        assertEquals("some data Received", secondResult.getPayloadAsString());

        assertNull(sendMessage("vm://in", "vm://out", messageFooDuplicate));
    }

    @Test
    public void testAbortInPreparePhase() throws Exception {

        getFunctionalTestComponent("main").setEventCallback(new EventCallback() {
            @Override
            public void eventReceived(MuleEventContext context, Object component) throws Exception {
                Transaction tx = TransactionCoordination.getInstance().getTransaction();
                tx.bindResource("", new XAResource() {
                    @Override
                    public void commit(Xid xid, boolean b) throws XAException {

                    }

                    @Override
                    public void end(Xid xid, int i) throws XAException {

                    }

                    @Override
                    public void forget(Xid xid) throws XAException {

                    }

                    @Override
                    public int getTransactionTimeout() throws XAException {
                        return 0;
                    }

                    @Override
                    public boolean isSameRM(XAResource xaResource) throws XAException {
                        return false;
                    }

                    @Override
                    public int prepare(Xid xid) throws XAException {
                        throw new XAException(XAException.XAER_RMERR);
                    }

                    @Override
                    public Xid[] recover(int i) throws XAException {
                        return null;
                    }

                    @Override
                    public void rollback(Xid xid) throws XAException {

                    }

                    @Override
                    public boolean setTransactionTimeout(int i) throws XAException {
                        return true;
                    }

                    @Override
                    public void start(Xid xid, int i) throws XAException {

                    }
                });

            }
        });

        assertNull(sendMessage("vm://in", "vm://out", messageFoo));

        getFunctionalTestComponent("main").setEventCallback(null);

        MuleMessage result = sendMessage("vm://in", "vm://out", messageFooDuplicate);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);
        assertEquals("some data Received", result.getPayloadAsString());
    }


    @Ignore
    public void testCommitWithFailure() throws Exception {

//         setDisposeContextPerClass(true);
        //DefaultMuleMessage message = new DefaultMuleMessage("some data", muleContext);
        //TransactionCoordination.getInstance();
        //              sendMessage("vm://in", "vm://out", message);


        disposeContext();
        setUpMuleContext();

        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                DefaultMuleMessage message = new DefaultMuleMessage("some data", muleContext);

                try {
                    getFunctionalTestComponent("main").setEventCallback(new EventCallback() {
                        @Override
                        public void eventReceived(MuleEventContext context, Object component) throws Exception {
                            Transaction tx = TransactionCoordination.getInstance().getTransaction();
                            tx.bindResource("", new XAResource() {
                                @Override
                                public void commit(Xid xid, boolean b) throws XAException {
                                    //           Thread.currentThread().destroy();
                                }

                                @Override
                                public void end(Xid xid, int i) throws XAException {
                                    //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public void forget(Xid xid) throws XAException {
                                    //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public int getTransactionTimeout() throws XAException {
                                    return 5000 / 1000;  //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public boolean isSameRM(XAResource xaResource) throws XAException {
                                    return false;  //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public int prepare(Xid xid) throws XAException {


                                    throw new XAException(XAException.XA_RBROLLBACK);  //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public Xid[] recover(int i) throws XAException {
                                    return null;  //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public void rollback(Xid xid) throws XAException {
                                    //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public boolean setTransactionTimeout(int i) throws XAException {
                                    return true;  //To change body of implemented methods use File | Settings | File Templates.
                                }

                                @Override
                                public void start(Xid xid, int i) throws XAException {
                                    //To change body of implemented methods use File | Settings | File Templates.
                                }
                            });

                        }
                    });

                    sendMessage("vm://in", "vm://out", message);
                } catch (Exception e) {
                    throw new RuntimeException();
                }


            }


        });


        t.run();

//        while(t.isAlive() == false)
//        {
//
//        }


        Thread.sleep(500000);

//        ListableObjectStore os =  ((ObjectStoreManager) muleContext.getRegistry()
//                .get(MuleProperties.OBJECT_STORE_MANAGER))
//                .getObjectStore("_transactionAwareStore", true);

        //os.close();
        // getFunctionalTestComponent("main").setWaitTime(4000);
//        assertEquals(sendMessage("vm://in", "vm://out", message);
        //Thread.sleep(10000);


        //  assertNull(sendMessage("vm://in", "vm://out", message));

        //    getFunctionalTestComponent("main").setEventCallback(null);

//        muleContext.dispose();

        //muleContext.initialise();
        //muleContext.start();
        //   muleContext = null;
        // Thread.sleep(20000);
        // muleContext = this.createMuleContext();
        // Thread.sleep(50000);
//        assertNull(sendMessage("vm://in", "vm://out", message));
    }

    private MuleMessage sendMessage(String inboundEndpoint, String outboundEndpoint, MuleMessage message) throws Exception {
        client.dispatch(inboundEndpoint, message);
        return client.request(outboundEndpoint, RECEIVE_TIMEOUT);
    }
//
//    @AfterClass
//    public static void disposeContext() {
//        try {
//            if (muleContext != null && !(muleContext.isDisposed() || muleContext.isDisposing())) {
//                muleContext.dispose();
//            }
//            FileUtils.deleteTree(FileUtils.newFile("./ActiveMQ"));
//        } finally {
//            muleContext = null;
//        }
//    }


//    @Override
//    public void eventReceived(MuleEventContext context, Object component) throws Exception {
//        ((DefaultMuleMessage) context.getMessage()).setUniqueId("1234");
//    }


}
